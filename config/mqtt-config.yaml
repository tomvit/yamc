# yamc configuration file

# directories
directories:
  data: ../data
  logs: ../logs

# custom python functions that can be used in collectors' python expressions
# using references defined by keys in the below yaml structure
custom-functions:
  _utils: ../etc/custom-functions/utils.py

## list of data writers
writers:
  # pushover
  pushover:
    class: yamc_pushover.PushoverWriter

    # pushover client token and user token
    app_token: ${PUSHOVER_APP_TOKEN}
    user_token: ${PUSHOVER_USER_TOKEN}

    # push notifications will be sent at most every 1 second
    write_interval: 1

  # csv sensor writer
  sensor_data_csv:
    class: yamc.writers.CsvWriter
    handler:
      class: logging.handlers.RotatingFileHandler
      filename: ../data/sensor_data/sensor_data.csv
      maxBytes: 200000
      backupCount: 5

  # state machine
  state1:
    class: yamc.writers.StateWriter
    name: state1

## list of data providers
providers:
  # mqtt provider
  mqtt:
    class: yamc_mqtt.MQTTProvider
    name: yamc2mqtt
    address: ${MQTT_BROKER_ADDRESS}

    # topics for this MQTT client provider
    topics:
    # - zigbee2mqtt/door-sensor
    # - zigbee2mqtt/water-leak
    # - zigbee2mqtt/temperature1
    - zigbee2mqtt/kettle

  state1:
    class: yamc.providers.StateProvider
    name: state1

    topics:
    - timer/kettle
    - kettle/operating
    - door/state

# list of collectors
collectors:
  # door_sensor:
  #   class: yamc.collectors.EventCollector
  #   source: !py providers.mqtt.select("zigbee2mqtt/door-sensor") + providers.state1.select("door/state")
  #
  #   writers:
  #   - writer_id: state1
  #     def:
  #     - if: !py event.topic_id == 'zigbee2mqtt/door-sensor'
  #       def:
  #       - if: !py event.data.contact == False and providers.state1.get('door/state') != 'open'
  #         door:
  #           state: 'open'
  #       - if: !py event.data.contact == True and providers.state1.get('door/state') != 'closed'
  #         door:
  #           state: 'closed'
  #   - writer_id: pushover
  #     def:
  #     - if: !py event.topic_id == 'door/state'
  #       message: !py _utils.format("The door is {state}!", state=event.data)

  # temp_sensor:
  #   class: yamc.collectors.EventCollector
  #   source: !py providers.mqtt.select("zigbee2mqtt/temperature1")
  #
  #   writers:
  #   - writer_id: pushover
  #     def:
  #       message: !py _utils.format("The temperature is {temp}", temp=event.data.temperature)

  kettle:
    class: yamc.collectors.EventCollector
    source: !py providers.mqtt.select("zigbee2mqtt/kettle") + providers.state1.select("timer/kettle", "kettle/operating")

    writers:
    - writer_id: state1
      def:
      - if: !py event.topic_id == 'zigbee2mqtt/kettle'
        def:
      #   - if: !py event.data.state == 'ON'
      #     kettle:
      #       state: 'ON'
      #     timer:
      #       kettle:
      #         value: 5
      #   - if: !py event.data.state == 'OFF'
      #     kettle:
      #       state: 'OFF'
      #     timer:
      #       kettle:
      #         value: 0
        - if: !py event.data.power > 0 and not providers.state1.get('kettle/operating')
          kettle:
            operating: True
        - if: !py event.data.power == 0 and providers.state1.get('kettle/operating')
          kettle:
            operating: False
    - writer_id: pushover
      def:
      # - if: !py event.topic_id == 'timer/kettle'
      #   message: "Hey there"
      - if: !py event.topic_id == 'kettle/operating' and providers.state1.get("kettle/operating")
        message: "Kettle is ON"
      - if: !py event.topic_id == 'kettle/operating' and not providers.state1.get("kettle/operating")
        message: "Kettle is OFF"
        #message: "Kettle operating change"

  # all_sensors:
  #   class: yamc.collectors.EventCollector
  #   source: !py providers.mqtt.select("zigbee2mqtt/.*")
  #
  #   writers:
  #   - writer_id: sensor_data_csv
  #     def:
  #       id: !py event.topic_id
  #       time: !py event.time
  #       battery: !py event.data.battery
  #       last_seen: !py event.data.last_seen
  #       linkquality: !py event.data.linkquality
  #       power_outage_count: !py event.data.power_outage_count
  #       state : !py event.data.state
  #       voltage: !py event.data.voltage

  # low_battery:
  #   class: yamc.collectors.EventCollector
  #   source: !py providers.mqtt.select("zigbee2mqtt/.*")
  #
  #   writers:
  #     - writer_id: pushover
  #       do_push: !py "event.data.battery is not None and event.data.battery < 20"
  #       message: !py _utils.format("The sensor {id} has low battery ({battery}%)!",id=event.topic_id,battery=event.data.battery)
